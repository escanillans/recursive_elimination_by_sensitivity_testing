deltaW_ij = matrix(c(0.0009, .0023, .0003, .0029, -.0003, -.0008, -.0001, -.0010), nrow = 4, ncol = 2)
deltaW_ij
w_ij + deltaW_ij
.024 / (.024 + .014)
View(w_ij)
a %*% w_ij
a
t(a) %*% w_ij
sigmoidFunc(t(a) %*% w_ij)
View(hiddenVector)
View(hiddenToOutWeightMatrix)
hiddenVector
hiddenVector %*% t(hiddenToOutWeightMatrix)
sigmoidFunc(hiddenVector %*% t(hiddenToOutWeightMatrix))
View(hiddenVector)
hiddenVector * 0.2
1- 0.584
0.2*0.416*0.416*0.584*hiddenVector
hiddenToOutWeightMatrix * 0.416 * 0.416 * 0.584
View(hiddenVector)
hiddenVector %*% (1 - hiddenVector)
1 - hiddenVector
hiddenVector %*% t(1 - hiddenVector)
(hiddenVector %*% t(1 - hiddenVector)) * 0.2
0.2 * 0.4809811
(hiddenVector %*% t(1 - hiddenVector)) * 0.2
(hiddenVector %*% t(1 - hiddenVector)) * 0.2 * inputFeatVector
(hiddenVector %*% t(1 - hiddenVector)) * 0.2
(hiddenVector %*% t(1 - hiddenVector)) * 0.2
as.numeric((hiddenVector %*% t(1 - hiddenVector)) * 0.2 )
as.numeric((hiddenVector %*% t(1 - hiddenVector)) * 0.2 ) * inputFeatVector
hiddenToOutWeightMatrix * .416 * .416 * .584
t(as.numeric((hiddenVector %*% t(1 - hiddenVector)) * 0.2 ) * inputFeatVector) %*% (hiddenToOutWeightMatrix * .416 * .416 * .584)
.1 * .4
.1 * .4 + .9 * .4
.1 * .4 + .9 * .4 + .1 * .6 + .1 * .9 * .6
rm(list = ls())
x = 5
y = 10
featnum = 1
if(x > 5 || featnum == 1){print("success")}else{print("fail")}
if(x > 5 || featnum == 10){print("success")}else{print("fail")}
5^(-2:2)
2^(-2:2)
-2:.01:2
-5:1
-2:5
10^(-2:5)
10^(-5:1)
5^(-2:2)
2^(-2:2)
predirct?
s
predict?
()
predict()?
predict()?
s
?predict
attr?
0
?attr()
data(iris)
iris
attach(iris)
library(e1071)
model <- svm(Species ~ ., data = iris)
# alternatively the traditional interface:
x <- subset(iris, select = -Species)
y <- Species
model <- svm(x, y)
model
Y
y
x
model <- svm(Species ~ ., data = iris)
model
print(model)
summary(model)
vector = 1:100
vector = seq(0,10,1/2)
vector
ceiling(vector)
vector = seq(0, 20, 20/5)
vector
seq(0, 50, 50/5)
seq(0, 100, 100/5)
abc = c(1,2,3)
abc[1]
abc[2]
5^(-2:2)
2^-5
2^seq(-5, 15, 2)
2^-5
2^15
2^(seq(-15,3,3))
?matrix
X = matrix(data = c(1,1,0,0,0,
1,1,1,1,0,
0,0,2,0,3), nrow = 3, ncol = 2)
0,0,2,0,3), nrow = 3, ncol = 5)
X = matrix(data = c(1,1,0,0,0,1,1,1,1,0,0,0,2,0,3), nrow = 3, ncol = 5)
X
cost = matrix(data = c(1, 2, 3, 5, 8), nrow = 5, ncol = 1)
cost
X %*% cost
X * cost
X %*% cost
X
X = matrix(data = c(1,1,0,0,0,1,1,1,1,0,0,0,2,0,3), ncol = 5, nrow = 3)
X
X = matrix(data = c(1, 1, 0, 1, 1, 0, 0, 1, 2, 0, 1, 0, 0, 0, 3), ncol = 5, nrow = 3)
X
X %*% cost
X = matrix(data = c(1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 2, 0, 0, 3), ncol = 5, nrow = 3)
X %*% cost
corey_linsley = c(6,2,1)
corey_linsley
corey_linsley = as.matrix(corey_linsley)
corey_linsley
transpose(corey_linsley)
t(corey_linsley)
t(corey_linsley) %*% X
t(corey_linsley) %*% X %*% cost
install.packages("pracma")
?rref
??rref
?rref
library(pracma)
?rref
A = matrix(data = c(2, 2, -4, 4, -2, 1, 4, -1, 4, 10, -8, 14, -2, 7, 4, 6), nrow = 4, ncol = 4)
A
rrfe(A)
rref(A)
A
View(A)
View(rref(A))
?pivot
?ref
ref(A)
install.packages("igraph")
?graph.de.bruijn
??graph.de.bruijn
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1)) # edgelist (a=origin, b=destination, c=weight)
mat<-matrix(0, 5, 5)
for(i in 1:NROW(el)) mat[ el[i,1], el[i,2] ] <- el[i,3]  # SEE UPDATE
mat
el
rm(list = ls())
list = c("AT", "CG", "CG", "GA", "GC", "GT", "TG", "TG")
unique(list)
list[1]
?match
match("AT", list)
match("CG", list)
for(i in 1:length(unique(list))){cat("Node: ", unique(list)[i]," ", match(unique(list)[i], list), "\n")}
"AT" %in% list
match(unique(list)[1], list)
match(unique(list)[2], list)
match(unique(list)[3], list)
unique(list)[3]
match("GA", list)
for(i in 1:length(unique(list))){cat("Node: ", unique(list)[i]," ", sum(unique(list) == list), "\n")}
for(i in 1:length(unique(list))){cat("Node: ", unique(list)[i]," ", sum(unique(list)[i] == list), "\n")}
list
list = c("AT", "CG", "CG", "GA", "GC", "GT", "TG", "TG", "TG", "TG")
for(i in 1:length(unique(list))){cat("Node: ", unique(list)[i]," ", sum(unique(list)[i] == list), "\n")}
.09 * 80000
.33 * 80000
50000/(.33*80000)
26400/50000
.15*80000
12000/.04
18800/80000
80000*.18
18800-14400
4400/80000
18800/80000
23.5-18/23.5
23.5-18
5.5/18
37000/44.8
67-37
30/37
(56-26)/26
59-18
41/18
abs((26+18) - (56+59))/(26+18)
12000*100
(12000*100)/10
((12000*100)/10)*.25
((22500*100)/25)*.15
90/(90+220+690)
120/(120+520+1360)
60/(60+300+640)
30/(30+160+810)
80/(80+440+980)
160/(30+160+810)
1.2*884300
221000-157920
218900-221000
225200-218900
252400-225200
150/100
157920/1.5
105280*1.5
(.23+.18)*(14000000)
(.23+.18)*(14000000) + .(.35*6000000)
(.23+.18)*(14000000) + (.35*6000000)
7840000/20000000
.23 * 14000000
(.23 * 14000000)/(.1 * 6000000)
(.12 * 14000000)/(.01*6000000)
.9*4000000000
(.9*4000000000) - (.95 * 2000000000)
.21 * 4
(.1 * 4)/(.05 * 2)
########################### Problem 7 ###########################
A = matrix(data = c(25, 20, 40,
0, 1, 1,
1, 2, 6), nrow = 3, ncol = 3)
b = matrix(data = c(110, 110, 210), nrow = 3, ncol = 1)
# A) Find solution to system, i.e. find x_hat
# Note: both ways below are equivalent
x_hat = solve(A, b)
x_hat = solve(t(A) %*% A) %*% t(A) %*% b
# B) determine the correct grams of fat in each cereal
# Note: Ax = b <=> A = bx^-1 (x is L.I. since it is just a 1 column vector)
x_star = matrix(data = c(4, 9, 4), nrow = 3, ncol = 1)
A
x_star
t(x_star)
x_hat
25^2+20^2+40^2
solve(t(A)%*%A)
A_candidate = matrix(data = c(25, 20, 40, 30, 35,
15, 12, 30, 15, 20,
10, 8, 10, 15, 15,
0, 1, 1, 0, 2,
1, 2, 6, 3, 4), nrow = 5, ncol = 5)
A_candidate
rref(A_candidate)
library(pracma)
rref(A_candidate)
X = matrix(data = c(1, -1, 2, 1, 2, 0, 2, -1, 2, 0, -1, 1), nrow = 6, ncol = 2)
X
t(X)%*%X
solve(t(X)%*%X)
?solve
solve(t(X)%*%X) %*% t(X) %*% matrix(data = c(1, 1, 1, -1, -1, 1), nrow = 6, ncbol = 1)
solve(t(X)%*%X) %*% t(X) %*% matrix(data = c(1, 1, 1, -1, -1, 1), nrow = 6, ncol = 1)
X
solve(t(X) %*% X)
solve(t(X) %*% X) %*% t(X)
y = matrix(data = c(1, 1, 1, -1, -1, 1), nrow = 6, ncol = 1)
y
solve(t(X) %*% X) %*% t(X) %*% y
14/96
solve(t(X) %*% X)
11/96
-5/96
solve(t(X) %*% X) %*% t(X)
21/96
3/8
-36/96
71/96
5/8
11+12+5+32+11
71/96
solve(t(X) %*% X) %*% t(X)
solve(t(X) %*% X) %*% t(X) %*% y
y = matrix(data = c(1, 1, 1, -1, -1, 1), nrow = 6, ncol = 1)
solve(t(X) %*% X) %*% t(X) %*% y
60/96
matrix(c(11, -5, -5, 11), nrow = 2, ncol = 2) %*% matrix(c(1, 2, -1, -1, 2, 2, 1, 0, 2, -1, 0, 1), nrow = 2, ncol = 6)
A
solve(A) %*% b
solve(t(A)%*%A) %*% t(A) %*% b
t(A)%*%A
(1/4)^3
(1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3)
frac((1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3))
fraction((1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3))
as.fraction((1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3))
as.frac((1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3))
library(MASS)
fractions((1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3))
(1/84)^2
(1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * 1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3)
(1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * (1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3)
scipen()
?options()
?options(scipen = 999)
(1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3)
options(scipen = 999)
(1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3)
options(scipen = 0)
(1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3)
7.84 * 10 ^-6
((1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3))/((1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * (1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3))
((1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3))/((1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * (1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3))
(1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * (1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3)
(1/4)^3 * (3/14) * (1/4)^3 * (2/3)^3 * (1/3)
(1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * (1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3)
(1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * (1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3) + (1/4)^8
1 - ((1/3) + (2/3)*(1/3) + (2/3)^2 *(1/3) + (2/3)^3 *(1/3)
)
1 - ((1/3) + (2/3)*(1/3) + (2/3)^2 *(1/3) + (2/3)^3 *(1/3))
(2/3)^3 *(1/3)
(2/3)^3
(2/3)^3 / 3
1 - ((1/3) + (2/3)*(1/3) + (2/3)^2 *(1/3) + (2/3)^3 *(1/3))
(1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * (1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3) + (1/4)^8
(1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * (1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3)
(1/84)^2 * (3/14)^2 * (1/3) + (1/4)^2 * (1/84)^2 *(3/14) * (2/3) * (1/3) + (1/4)^4 * (1/84)^2 * (2/3)^2 * (1/3) + (1/4)^6 * (3/14) * (2/3)^3 * (1/3) + (1/4)^8 * (1 - ((1/3) + (2/3)*(1/3) + (2/3)^2 *(1/3) + (2/3)^3 *(1/3)))
1.085413e-05
1.085413e-05 * 10
5.166997e-06/1.085413e-05
7.840044e-06/1.085413e-05
3/14
84/14
probmatrix = matrix(data = c((1/84), (1/84), (1/84), (1/84), )
s
probmatrix = matrix(data = c((1/84), (1/84), (1/84), (1/84),(1/84), (1/84), (1/84), (1/84), (1/84), (1/84), (1/84), (1/84), (1/84), (1/84), (1/84), (1/84)), nrow = 4, ncol = 4)
probmatrix
probmatrix = matrix(data = c((1/84), (1/84), (1/84), (3/14),(3/14), (1/84), (3/14), (1/84), (3/14), (1/84), (3/14), (1/84), (1/84), (1/84), (1/84), (3/14)), nrow = 4, ncol = 4)
probMatrix
probmatrix
sum(probmatrix)
probmatrix[1,]
sum(probmatrix[1,])
probmatrix[3,] = 0
probmatrix
probmatrix[,4] = 0
probmatrix
sum(probmatrix)
probmatrix[,3] = 0
sum(probmatrix)
(3/14) + 6*(1/84)
(3/14) + 6*11*(1/84)
X = matrix(data = rep(1,16), nrow = 4, ncol = 4)
X
svd(X)
seq(1:4,1)
rep(1:4,3)
X_1 = matrix(data = c(rep(1,4),rep(2,4), rep(3,4), rep(4,4)), nrow = 4, ncol = 4)
X_1
svd(X_1)
X
U = matrix(data = c(1,1,1,1), nrow = 4, ncol = 1)
V = matrix(data = c(1,2,3,4), nrow = 4, ncol = 1)
S = matrix(data = c(1), nrow = 1, ncol = 1)
X = U%*%S%*%V
X = U%*%S%*%t(V)
X
X = matrix(data = rep(1,16), nrow = 4, ncol = 4)
svd(X)
svd = svd(X)
svd$u[1]
svd$u[,1]
as.matrix(svd$u[,1]) %*% t(as.matrix(svd$u[,1]))
t(as.matrix(svd$u[,1])) %*% as.matrix(svd$u[,1])
U = matrix(data = c(1,1,1,1), nrow = 4)
U
t(U) %*% U
U = matrix(data = c(.25, .25, .25, .25), nrow = 4)
t(U) %*% U
U = matrix(data = c(.5, .5, .5, .5), nrow = 4)
t(U) %*% U
V = matrix(data = c(.5, .5, .5, .5), nrow = 4)
S = matrix(4)
S
U %*% S %*% V
U %*% S %*% t(V_
)
U %*% S %*% t(V)
U = matrix(data = c(1/sqrt(30), 2/sqrt(30), 3/sqrt(30), 4/sqrt(30)), nrow = 4)
U
V = matrix(data = c(1/sqrt(30), 2/sqrt(30), 3/sqrt(30), 4/sqrt(30)), nrow = 4)
U = matrix(data = c(.5, .5, .5, .5), nrow = 4)
t(V) %*% V
A
A = matrix(data = c(0, .333, .333, .333, 0, 0, .5, .5, 1, 0, 0, 0, .5, 0, .5, 0), nrow = 4, ncol = 4)
A
b = matrix(data = c(.25, .25, .25, .25), nrow = 4)
A %*% b
A^5 %*% b
A^2 %*% b
A %*% A %*% b
A %*% A  %*% A %*% A %*% A %*% A %*% A %*% A%*% b
ZeroMatrix = zeros(3,3)
ZeroMatrix = matrix(data = c(0,0,0,0,0,0,0,0,0), nrow = 3)
ZeroMatrix
svd(ZeroMatrix)
matrix = matrix(data = c(0,0,1,2,3,1,0,2,3), nrow = 3)
matrix
svd(matrix)
(2/3)*(2/15)*(.3)*.2
(1/3)*(.5)*(9/15)*(4/14)
(2/3)*(9/15)*(4/14)*(9/15)*(4/14)
A = matrix(data = c(8, -2, 20, 19, 14, 10), nrow = 3)
A
svd(A)
norm(1-2,type = "2")
norm(1-5,type = "2")
norm(-1-0,type = "2")
norm(0-0,type = "2")
norm(1-0,type = "2")
norm(10-0,type = "2")
norm(11-0,type = "2")
norm(19-0,type = "2")
norm(-1-17,type = "2")
norm(0-17,type = "2")
norm(1-17,type = "2")
norm(10-17,type = "2")
norm(11-17,type = "2")
norm(19-17,type = "2")
10+11+19
40/3
19^2
18^2
17^2
16^2
(norm(19-17,type = "2"))^2
(norm(-1-13.3,type = "2"))^2
(norm(0-13.3,type = "2"))^2
(norm(1-13.3,type = "2"))^2
(norm(10-13.3,type = "2"))^2
(norm(11-13.3,type = "2"))^2
(norm(19-13.3,type = "2"))^2
(norm(1-7,type = "2"))^2
(norm(0-7,type = "2"))^2
(norm(-1-7,type = "2"))^2
(norm(10-7,type = "2"))^2
(norm(14-7,type = "2"))^2
(norm(19-7,type = "2"))^2
(norm(-1-17,type = "2"))^2
(norm(0-17,type = "2"))^2
(norm(1-17,type = "2"))^2
(norm(10-17,type = "2"))^2
(norm(11-17,type = "2"))^2
(norm(19-17,type = "2"))^2
21/5
(norm(-1-4.2,type = "2"))^2
(norm(0-4.2,type = "2"))^2
(norm(1-4.2,type = "2"))^2
(norm(10-4.2,type = "2"))^2
(norm(11-4.2,type = "2"))^2
(norm(19-4.2,type = "2"))^2
(norm(19-19,type = "2"))^2
(norm(19-11,type = "2"))^2
(norm(19-10,type = "2"))^2
(norm(1-19,type = "2"))^2
(norm(0-19,type = "2"))^2
(norm(-1-19,type = "2"))^2
choose(3,2)
?choose
?combination
?comb
?combn
combn(1:3)
combn(1:3, 3)
combn(1:3, 2)
combn(1:2, 3)
.4*.3*.2
1-.024
.4*.4*.8
.4*.3*.8
.4*.7*.7
.4*.7*.3
.6*.7*.2
.6*.7*.8
.6*.7*.3
.6*.3*.3
.054+.126+.336+.084+.084+.196+.096+.024
(.096+.084)
(.096+.084)/(.096+.084+.336+.054)
(.196+.084)/(.196+.084+.126+.054)
.096/(.096+.336)
80+99+100+89+92+90
550/6
(91.666666*.55)+(90.5*.2)+(4.5)+(50*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(60*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(80*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(85*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(50*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(40*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(90*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(82*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(100*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(98*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(95*.2)
(91.666666*.55)+(90.5*.2)+(4.5)+(94*.2)
(91.666666*.55)+(90.5*.2)+(5)+(94*.2)
(91.666666*.55)+(90.5*.2)+(5)+(90*.2)
?log2
log2(e)
log2(exp(1))
exp(1)
log(.1)
log(.2)
log(.9)
log(1)
log(0)
log(1)
log(1.5)
90+210+50+50
72+168+180+180
300/400
72+168
240/600
setwd("~/Google Drive/githubRepositories/recursive_elimination_by_sensitivity_testing")
